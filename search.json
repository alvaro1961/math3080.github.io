[{"path":"index.html","id":"introduction-to-r","chapter":"1 Introduction to R","heading":"1 Introduction to R","text":"start reviewing fundamental concepts R language.\nassume downloaded installed RStudio.Base R refers core functionality built-functions R programming language without additional packages libraries. provides essential data structures (vectors, matrices, data frames, lists), control structures (loops, conditionals), basic statistical functions.Libraries, packages, R extensions add specialized functions capabilities beyond ’s available base R. developed R community address specific tasks domains. libraries enhance R’s functionality make powerful tool wide range data analysis statistical tasks.","code":""},{"path":"index.html","id":"variables-and-data-types","chapter":"1 Introduction to R","heading":"1.1 Variables and Data Types","text":"R, variables store data assigned using <-. various types, including numeric (real complex numbers), character (strings, written quotes), logical boolean (TRUE FALSE)","code":"\nx <- 2\ny <- \"I am a string\"\nz <- TRUE\n\nprint(x)\n#> [1] 2\nprint(y)\n#> [1] \"I am a string\"\nprint(z)\n#> [1] TRUE"},{"path":"index.html","id":"logical-operators-and-conditionals","chapter":"1 Introduction to R","heading":"1.2 Logical Operators and Conditionals","text":"logical operators perform logical operations boolean values. include:represented \\(\\wedge\\) logic & R.represented \\(\\vee\\) logic | R.represented \\(\\neg\\) logic ! R.formally defined truth tables . Note TRUE values true, TRUE least one value true.defined obvious way: \\(\\neg p\\) FALSE \\(p\\) TRUE TRUE \\(p\\) FALSE.R, == used check objects equal != used check objects aren’t equal. example, 1==2 FALSE 1!=2 TRUE. comparison symbols < > meaning use math. Less equal \\(\\leq\\) <= greater equal \\(\\geq\\) >=.Conditionals R structures allow us execute different blocks code based specified conditions. main conditional statement statement, can extended else statement else clauses. following syntax:","code":"if (condition) {\n  # Code to execute when the condition is TRUE\n}if (condition) {\n  # Code to execute when the condition is TRUE\n} else {\n  # Code to execute when the condition is FALSE\n}if (condition1) {\n  # Code to execute when condition1 is TRUE\n} else if (condition2) {\n  # Code to execute when condition1 is FALSE and condition2 is TRUE\n} else {\n  # Code to execute when both condition1 and condition2 are FALSE\n}"},{"path":"index.html","id":"functions","chapter":"1 Introduction to R","heading":"1.3 Functions","text":"functions R following syntax:functions \\(f\\) \\(g\\) demonstrate simple examples. function \\(g\\) also illustrates use conditionals.\\[f(x)=2x^2-3x-1\\]\n\\[g(x)=\\begin{cases}2x+1&\\text{}x<0\\\\x^2 &\\text{otherwise} \\end{cases}\\]can evaluate functions.","code":"function_name <- function(arg1, arg2, ...) {\n  # Code defining the function's behavior\n  return(result)\n}\nf <- function(x){\n  return(2*x^2-3*x-1)\n}\n\ng <- function(x) {\n  if (x < 0) {\n    result <- 2 * x+1\n  } else {\n    result <- x^2\n  }\n  return(result)\n}\nf(0)\n#> [1] -1\ng(-2)\n#> [1] -3"},{"path":"index.html","id":"vectors-and-operations","chapter":"1 Introduction to R","heading":"1.4 Vectors and Operations","text":"Vectors fundamental data structures R provide flexible way work manipulate sequences values.R, vectors one-dimensional arrays store elements data type. Vectors often created using c( ) function can used represent situations, like box 3 red balls, 2 yellow ones 1 green.colon operator : used create sequences numbers steps length 1 -1. basic syntax start:end. examples:","code":"\nnumeric_vector <- c(1,2,3,4,5)\nbox <- c(\"red\",\"red\",\"red\",\"yellow\",\"yellow\",\"green\")\n1:10\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n20:12\n#> [1] 20 19 18 17 16 15 14 13 12\n3:8\n#> [1] 3 4 5 6 7 8"},{"path":"index.html","id":"indexing-and-subsets","chapter":"1 Introduction to R","heading":"1.5 Indexing and Subsets","text":"Elements vector accessed using square brackets indices. Indexing starts 1 R, different programming languages, indexing typically starts 0.can also select subset elements using index vectors boolean vectors.","code":"\nx <- box[3]\nx\n#> [1] \"red\"\nbox[2:4]\n#> [1] \"red\"    \"red\"    \"yellow\"\nbox[c(3,4,6)]\n#> [1] \"red\"    \"yellow\" \"green\"\nnumbers <- 1:6\nnumbers[c(T,F,T,F,T,F)]\n#> [1] 1 3 5"},{"path":"index.html","id":"vectorized-operations","chapter":"1 Introduction to R","heading":"1.6 Vectorized Operations","text":"R supports vectorized operations, allowing us perform operations entire vectors without need explicit loops. Recall numeric_vector <- c(1,2,3,4,5).Vectorized operation also supports logical operationsWe can combine features select objects satisfying certain propertiesExample 1.1  Suppose x<-c(2,1,4,1,5,1,6,2). Find elements larger 2If want know indices values greater 2, use () functionWe can select objects using complicated expressions involve logical operators.Example 1.2  Suppose x<-c(2,1,4,1,5,1,6,2). Find elements larger 1 less 6","code":"\nnumeric_vector*(-3)\n#> [1]  -3  -6  -9 -12 -15\nnumeric_vector^3\n#> [1]   1   8  27  64 125\nnumeric_vector+numeric_vector\n#> [1]  2  4  6  8 10\nnumeric_vector>2\n#> [1] FALSE FALSE  TRUE  TRUE  TRUE\nbox == \"yellow\"\n#> [1] FALSE FALSE FALSE  TRUE  TRUE FALSE\nx<-c(2,1,4,1,5,1,6,2)\nx\n#> [1] 2 1 4 1 5 1 6 2\ny <- x>2\ny\n#> [1] FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE\nx[y]\n#> [1] 4 5 6\nwhich(y)\n#> [1] 3 5 7\nx\n#> [1] 2 1 4 1 5 1 6 2\ny <- (x>1)&(x<6) #Recall that & is the AND operator in R\ny\n#> [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE\nx[y]\n#> [1] 2 4 5 2"},{"path":"index.html","id":"vectorize","chapter":"1 Introduction to R","heading":"1.6.1 Vectorization of functions","text":"Since many built-functions R can applied directly vectors, functions like \\(f(x)=2x^2-3x-1\\), use operations, can applied vectors wellHowever, work functions conditionals, like \\(g(x)=\\begin{cases}2x+1&\\text{}x<0\\\\x^2 &\\text{otherwise.} \\end{cases}\\)Notice \\(g\\) evaluated values using \\(2x+1\\).R several ways vectorize functions like \\(g\\). One solution sapply() base R.","code":"\nx <- c(-1,0,1,2)\nf(x)\n#> [1]  4 -1 -2  1\nx <- c(-1,0,1,2)\ng(x)\n#> Warning in if (x < 0) {: the condition has length > 1 and\n#> only the first element will be used\n#> [1] -1  1  3  5\nx <- c(-1,0,1,2)\nsapply(x,g)\n#> [1] -1  0  1  4"},{"path":"index.html","id":"graphs-of-functions","chapter":"1 Introduction to R","heading":"1.6.2 Graphs of Functions","text":"Vectorization R simplifies process generating plots creating visualizations R.","code":"\nx <- -10:10\ny <- f(x)\nplot(x,y)\n# The optional arguments \"type\" and \"col\" allow us to change the graph\nplot(x,y,type=\"l\", col=\"red\")"},{"path":"simulations.html","id":"simulations","chapter":"2 Simulations","heading":"2 Simulations","text":"R widely used simulations due extensive set statistical mathematical functions, ease coding, strong support random number generation. R’s flexibility allows researchers analysts implement various simulation models.class use sample function replicate function extensively.","code":""},{"path":"simulations.html","id":"the-sample-function","chapter":"2 Simulations","heading":"2.1 The sample function","text":"sample() function R used randomly sample elements vector.\nbasic syntax : vector x, sample(x,size,replace=FALSE,prob=NULL)arguments: size, replace prob optional. included, size length vector, replace FALSE prob NULL. case, simply get random permutation vector. exampleThe sample function can used simulate several experiments","code":"\nsample(1:6)\n#> [1] 3 6 2 4 1 5"},{"path":"simulations.html","id":"getting-objects-out-of-a-box","chapter":"2 Simulations","heading":"Getting objects out of a Box","text":"Suppose box 3 red balls, 2 yellow ones 1 green. represent box vectorTo randomly select one ball box write sample(box,1)randomly select two balls box write sample(box,2). Notice doesn’t include replacement. either take two balls, take one ball another one.select two balls replacement means select one ball. look . Put back box select second one random. write sample(box,2,replace=T).","code":"box <- c(\"red\",\"red\",\"red\",\"yellow\",\"yellow\",\"green\")"},{"path":"simulations.html","id":"rolling-dice","chapter":"2 Simulations","heading":"Rolling dice","text":"roll die write sample(1:6,1)roll two dice write sample(1:6,2,replace=TRUE). Notice need add replace=TRUE can get number.","code":""},{"path":"simulations.html","id":"selecting-a-birthday-at-random","chapter":"2 Simulations","heading":"Selecting a birthday at random","text":"select birthday random write sample(1:365,1). ignore leap years assume birthdays described numbers 1 365. January 1st 1. January 2nd 2, etc.select 10 birthdays random, write sample(1:365,10,replace=T). Notice need add replace parameter since birthdays can .want select 10 different birthdays random, write sample(1:365,10).","code":""},{"path":"simulations.html","id":"getting-objects-out-of-a-box-using-the-prob-argument","chapter":"2 Simulations","heading":"Getting objects out of a Box using the prob Argument","text":"following alternative way select one ball random box contains 3 red balls, 2 yellow ones 1 green.optional prob argument assigned vector weights obtaining elements vector sampled. need sum one.","code":"\nsample(c(\"red\",\"yellow\",\"green\"),1,prob = c(3,2,1))\n#> [1] \"green\""},{"path":"simulations.html","id":"simulating-a-test-with-false-positives-and-false-negatives","chapter":"2 Simulations","heading":"Simulating a Test with False Positives and False Negatives","text":"Consider diagnostic test specific medical condition. test identifies individuals disease 90% time. However, also wrongly identifies individuals without disease positive 8% time. test 10% false negative rate 8% false positive rate.Let’s simulate test R. start agreeing input 0 1 (0 means person doesn’t disease 1 means person disease) output also 0 1 (0 means test negative 1 means test positive).Let’s see results test 40 healthy people. use rep( ) function. Notice function test conditionals. vectorize , use sapply base R function described beforeAnd now let’s see results 40 sick people","code":"\ntest <- function(x){\n  if (x==1) {\n    value = sample(c(0,1),1,prob = c(0.1,0.9))\n  } else {\n    value = sample(c(0,1),1,prob = c(0.92,0.08))\n  }\n  return(value)\n}\nhealthy <- rep(0,40)\nhealthy\n#>  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n#> [29] 0 0 0 0 0 0 0 0 0 0 0 0\nresultsH <- sapply(healthy, test)\nresultsH\n#>  [1] 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1\n#> [29] 0 0 0 0 0 0 0 0 0 0 0 0\nsick <- rep(1,30)\nsick\n#>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n#> [29] 1 1\nresultsS <- sapply(sick, test)\nresultsS\n#>  [1] 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1\n#> [29] 1 1"},{"path":"simulations.html","id":"the-replicate-function","chapter":"2 Simulations","heading":"2.2 The Replicate Function","text":"replicate( ) function R used replicate execution expression function multiple times. basic syntax replicate(n,expression). exampleTo roll die 10 times write replicate(10,sample(1:6,1)). can also using sample function.select 1 ball box 10 times, write replicate(10,sample(box,1)).","code":""},{"path":"simulations.html","id":"simulating-experiments","chapter":"2 Simulations","heading":"2.3 Simulating Experiments","text":"combine sample function, replicate function vector functions simulate complicated experiments. illustrate examples:Example 2.1  Roll die 20 times count number 6’s.First roll die 20 timesThen check values equal 6R treats FALSE values 0’s TRUE values 1’s. sum values find number 6’sExample 2.2  Run previous experiment 100 times find average.use replicate function run experiment 100 times use mean() function find averageTo simplifying reading code handle complex situations, can wrap expression curly braces compute .default, function replicates value last line","code":"\nvalues <- sample(1:6,20,replace = T)\nvalues\n#>  [1] 5 6 2 4 6 2 6 2 6 2 1 1 3 4 3 5 1 3 6 6\nvalues == 6\n#>  [1] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE\n#> [10] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n#> [19]  TRUE  TRUE\nsum(values == 6)\n#> [1] 6\nexper <-replicate(100,sum(sample(1:6,20,replace=T) == 6))\nexper \n#>   [1] 3 5 3 3 2 3 4 5 2 4 2 3 2 2 4 2 1 2 3 3 5 1 1 5 2 5 3\n#>  [28] 3 3 3 3 4 4 5 3 3 2 3 2 5 4 3 3 4 3 4 4 4 5 2 2 5 1 3\n#>  [55] 2 4 4 3 5 4 1 2 3 2 4 6 1 2 3 2 1 2 5 3 4 4 2 1 4 3 1\n#>  [82] 5 3 3 4 5 4 4 2 4 2 4 5 4 4 4 5 2 4 3\nmean(exper)\n#> [1] 3.19\nreplicate(100,{\n  values <- sample(1:6,20,replace=T)\n  sum(values == 6)\n})\n#>   [1] 4 3 6 4 2 3 2 2 3 0 5 3 2 5 3 6 5 2 2 5 3 0 3 2 2 3 0\n#>  [28] 4 4 4 3 3 3 2 1 3 2 3 3 4 4 5 2 2 1 4 2 8 6 2 5 4 4 4\n#>  [55] 1 1 3 3 6 1 2 1 1 3 1 2 4 5 4 3 4 5 7 6 5 2 3 6 3 4 2\n#>  [82] 1 2 1 4 1 3 2 2 7 3 1 4 1 3 2 5 6 4 4\nreplicate(100,{\n  values <- sample(1:6,20,replace=T)\n  sum(values == 6)\n  8\n})\n#>   [1] 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n#>  [28] 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n#>  [55] 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n#>  [82] 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8"},{"path":"project-1.html","id":"project-1","chapter":"3 Project 1","heading":"3 Project 1","text":"Use R simulate following:Roll dice 4 times find sumSelect 4 different numbers 1 100. Find maximum value, minimum value, difference.Roll 3 dice 100 times. Find many times sum dice least 10.Permute letters word SIMULATE 100 times find many times first letter S last letter E. , looking words form S******E.Repeat previous problem find many times first letter vowel.box 4 red balls 6 blue balls. Select 5 balls 10000 times find many times get exactly 3 red balls.popular carnival game, players roll three dice. least one 6, win $1; otherwise, lose $1. argue fair game. die 1/6 chance 6, probability least one 6 three dice rolls 1/6 + 1/6 + 1/6 = 1/2. Simulate game R. Play 1000 times find much money won lost.","code":""},{"path":"introduction-to-data-frame.html","id":"introduction-to-data-frame","chapter":"4 Introduction to Data Frame","heading":"4 Introduction to Data Frame","text":"","code":""},{"path":"introduction-to-data-frame.html","id":"data-frames","chapter":"4 Introduction to Data Frame","heading":"4.1 Data Frames","text":"Data frames R two-dimensional data structures, similar spreadsheets. used store manipulate datasets. key points :Structure: data frame collection vectors equal length, vector represents column. Recall elements vectors type.Structure: data frame collection vectors equal length, vector represents column. Recall elements vectors type.Columns: Different columns can different data types (numeric, character, factor, etc.).Columns: Different columns can different data types (numeric, character, factor, etc.).Rows: row corresponds separate observation record dataset.Rows: row corresponds separate observation record dataset.","code":""},{"path":"introduction-to-data-frame.html","id":"creating-data-frames","chapter":"4 Introduction to Data Frame","heading":"4.1.1 Creating Data Frames","text":"Data frames created using data.frame() function importing data sources.One option define column vectors combine data frame using data.frame() function shown example:used knitr::kable() function nicer display.Data frames can also defined inside data.frame() function directly, naming columns values.Notice data frames df1 df2 information. later learn df2 preferred df1. learn convert data frame like df1 data frame like df2. df2 “tidy” format fits specially well many libraries R.","code":"\nname = c(\"John Smith\",\"Jane Doe\", \"Mary Johnson\")\na <- c(NaN,16,3)\nb<- c(2,11,1)\ndf1 <- data.frame(name,a,b)\nknitr::kable(df1)\ndf2 <- data.frame(\n  name = c(\"John Smith\",\"Jane Doe\",\"Mary Johnson\",\"John Smith\",\"Jane Doe\",\"Mary Johnson\"),\n  treatment =c(\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"),\n  results = c(NaN,16,3,2,11,1)\n)\nknitr::kable(df2)"},{"path":"introduction-to-data-frame.html","id":"importing-data-sets-from-r-head-and-tail","chapter":"4 Introduction to Data Frame","heading":"Importing data sets from R, head(), and tail()","text":"R several data sets can imported using data() function. write data() inside R block run , see list data sets.illustration, import iris data set 150 rows. use head() function see first 6 rows. tail() function similar, shows last 6 rows default.","code":"\ndata(iris)\nhead(iris) \n#>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n#> 1          5.1         3.5          1.4         0.2  setosa\n#> 2          4.9         3.0          1.4         0.2  setosa\n#> 3          4.7         3.2          1.3         0.2  setosa\n#> 4          4.6         3.1          1.5         0.2  setosa\n#> 5          5.0         3.6          1.4         0.2  setosa\n#> 6          5.4         3.9          1.7         0.4  setosa"},{"path":"introduction-to-data-frame.html","id":"extracting-columns-from-a-data-frame","chapter":"4 Introduction to Data Frame","heading":"Extracting columns from a data frame","text":"syntax extract columns data_frame$column_name. Recall columns data frame vectors.","code":"\niris$Sepal.Length\n#>   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8\n#>  [14] 4.3 5.8 5.7 5.4 5.1 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0\n#>  [27] 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 5.5 4.9 4.4\n#>  [40] 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4\n#>  [53] 6.9 5.5 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6\n#>  [66] 6.7 5.6 5.8 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7\n#>  [79] 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 5.5\n#>  [92] 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3\n#> [105] 6.5 7.6 4.9 7.3 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5\n#> [118] 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2\n#> [131] 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8\n#> [144] 6.8 6.7 6.7 6.3 6.5 6.2 5.9"},{"path":"introduction-to-data-frame.html","id":"some-data-frame-functions","chapter":"4 Introduction to Data Frame","heading":"Some Data Frame Functions","text":"following list useful data frame functions. next section import library dplyr. library handles functions 9-14 nicer way.head(): Displays first rows data frame.tail(): Displays last rows data frame.str(): Shows structure data frame.summary(): Provides summary statistics column.nrow(): Returns number rows data frame.ncol(): Returns number columns data frame.colnames(): Returns sets column names.rownames(): Returns sets row names.subset(): Subsets data frame based conditions.\nsubset(df, condition)select(): Chooses specific columns.\nselect(df, column1, column2)filter(): Filters rows based conditions.\nfilter(df, condition)mutate(): Adds new variables modifies existing ones.\nmutate(df, new_column = expression)arrange(): Sorts rows based one columns.\narrange(df, column1, column2)merge(): Combines two data frames common columns.\nmerge(df1, df2, = “common_column”)illustrate functions data frame iris.","code":"\nstr(iris) #str shows the structure of the data set.\n#> 'data.frame':    150 obs. of  5 variables:\n#>  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n#>  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n#>  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n#>  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n#>  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\nsummary(iris) # summary provides summary statistical for each column.\n#>   Sepal.Length    Sepal.Width     Petal.Length  \n#>  Min.   :4.300   Min.   :2.000   Min.   :1.000  \n#>  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600  \n#>  Median :5.800   Median :3.000   Median :4.350  \n#>  Mean   :5.843   Mean   :3.057   Mean   :3.758  \n#>  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100  \n#>  Max.   :7.900   Max.   :4.400   Max.   :6.900  \n#>   Petal.Width          Species  \n#>  Min.   :0.100   setosa    :50  \n#>  1st Qu.:0.300   versicolor:50  \n#>  Median :1.300   virginica :50  \n#>  Mean   :1.199                  \n#>  3rd Qu.:1.800                  \n#>  Max.   :2.500\nnrow(iris) # nrwon finds the number of rows\n#> [1] 150\ncolnames(iris) # colnames finds the names of the columns\n#> [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\"\n#> [4] \"Petal.Width\"  \"Species\""},{"path":"dplyr-and-conditional-probability.html","id":"dplyr-and-conditional-probability","chapter":"5 DPLYR and Conditional Probability","heading":"5 DPLYR and Conditional Probability","text":"dplyr popular R library used manipulate data consistently efficiently. uses set functions, call “verbs”. functions used solve common data manipulation problems. main verbs :mutate create new columns. syntax isfilter select rows. syntax isselect select columns. syntax isarrange reorders rows. syntax isThese functions combined group_by() summarise() easily perform group-wise operations compute summary statistics within groups.use library type library(name_of_library). library intalled, install Packages RStudio.","code":"mutate(data_frame, new_column_name = expression)filter(data_frame,condition)select(data_frame, column1,column2,...,columnk)arange(data_frame,column1,columns2,...)"},{"path":"dplyr-and-conditional-probability.html","id":"conditional-probability-dice","chapter":"5 DPLYR and Conditional Probability","heading":"5.1 Conditional Probability - dice","text":"Example 5.1  roll two dice. Estimate conditional probability first die 6 sum 10Step 1: Select large number simulations generate dice data.Step 2: Make data dataframe.Step 3: Use mutate create new column includes sum.Step 4: Select rows add ten. key point conditional probability.Step 5: Extract column first die, find proportion sixes.","code":"\nn <- 10000\ndie1 <- sample(1:6,n,replace = T)\ndie2 <- sample(1:6,n,replace = T)\ndf <- data.frame(die1,die2)\nhead(df)\n#>   die1 die2\n#> 1    3    1\n#> 2    6    6\n#> 3    6    1\n#> 4    4    5\n#> 5    6    3\n#> 6    2    2\ndfm <- mutate(df,sum = die1+die2)\nhead(dfm)\n#>   die1 die2 sum\n#> 1    3    1   4\n#> 2    6    6  12\n#> 3    6    1   7\n#> 4    4    5   9\n#> 5    6    3   9\n#> 6    2    2   4\ndff <- filter(dfm,sum == 10)\nhead(dff)\n#>   die1 die2 sum\n#> 1    5    5  10\n#> 2    4    6  10\n#> 3    5    5  10\n#> 4    5    5  10\n#> 5    5    5  10\n#> 6    4    6  10\nmean(dff$die1 == 6)\n#> [1] 0.3015873"},{"path":"dplyr-and-conditional-probability.html","id":"the-pipe-operator-in-dplyr","chapter":"5 DPLYR and Conditional Probability","heading":"5.2 The Pipe Operator (%>%) in DPLYR","text":"Saving new dataframes every time perform new operations tedious can confusing. dplyr, pipe operator (%>%) passes result one operation first argument another operation. improves code readability creating concise syntax chains multiple operations together.example, four lines reproduce previous operations adds new column named experiment checks die1 equal 6.","code":"\ndf %>% \n  mutate(sum = die1+die2) %>%\n  filter(sum == 10) %>%\n  mutate(experiment = die1 == 6) %>%\n  head()\n#>   die1 die2 sum experiment\n#> 1    5    5  10      FALSE\n#> 2    4    6  10      FALSE\n#> 3    5    5  10      FALSE\n#> 4    5    5  10      FALSE\n#> 5    5    5  10      FALSE\n#> 6    4    6  10      FALSE"},{"path":"dplyr-and-conditional-probability.html","id":"conditional-probability-test","chapter":"5 DPLYR and Conditional Probability","heading":"5.3 Conditional Probability - test for disease","text":"Example 5.2  new test developed disease 1% population . test identifies individuals disease 90% time. However, also wrongly identifies individuals without disease positive 5% time. Estimate probability person tests positive disease actually disease.Notice test 10% false negative rate 5% false positive rate.first choose large number simulations proceed randomly assign individuals. person assigned value 1 probability 1%, indicating presence disease, 0 probability 99%, signifying absence disease.write function simulates test disease.Now apply test person. Since function conditionals, use sapply() function.Now select people tested positive, use base R function table find many disease many don’t.function table counts occurrences unique value given vector.output table function can plot directly pie plot bar plot.can easily add titles make graphs informative","code":"\nn <- 100000\npeople <- sample(c(0,1),n,replace = T,prob = c(0.99,0.01)) \ntest <- function(x){\n  if (x==1) {\n    value = sample(c(0,1),1,prob = c(0.1,0.9))\n  } else {\n    value = sample(c(0,1),1,prob = c(0.95,0.05))\n  }\n  return(value)\n}\nresults <- sapply(people, test)\ndf <- data.frame(people,results)\nhead(df)\n#>   people results\n#> 1      0       1\n#> 2      0       0\n#> 3      0       0\n#> 4      0       0\n#> 5      0       0\n#> 6      0       0\npositive <- filter(df,results==1)\nhead(positive)\n#>   people results\n#> 1      0       1\n#> 2      1       1\n#> 3      0       1\n#> 4      0       1\n#> 5      1       1\n#> 6      0       1\ntable(positive$people)\n#> \n#>    0    1 \n#> 4857  886\npie(table(positive$people))\nbarplot(table(positive$people))\npie(table(positive$people),main=\"People who tested positive\", labels=c(\"do not have the disease\",\"have the disease\"), col=c(\"#4CAF50\",\"#FF5252\"))\nbarplot(table(positive$people),main=\"People who tested positive\", names.arg = c(\"do not have the disease\",\"have the disease\"), col=c(\"#4CAF50\",\"#FF5252\"))"},{"path":"row-wise-operations.html","id":"row-wise-operations","chapter":"6 Row Wise Operations","heading":"6 Row Wise Operations","text":"R dplyr easier perform column operations row operations. illustrate following data frame:add columns using variables get right result.hand, use vectorized operators (.e., convert `x,y,z vector add ), get wrong answer. R (dplyr) computes sum accross rows:Something similar happens use functions.following block four functions. use first two compute sum columns last two select element row. first function computes sum adding variables. second one vectorizes variables adds . third function vectorizes variables selects one random, last one avoids vectorizing variables statements.add column functionAs see, first sum works well second one doesn’t. functions don’t work well either. choose_one1 selected one element rows. choose_one2 selected different elements, chosen column.","code":"\ndf\n#>   x y  z\n#> 1 5 1  9\n#> 2 6 2 10\n#> 3 7 3 11\n#> 4 8 4 12\nmutate(df,sum = x+y+z)\n#>   x y  z sum\n#> 1 5 1  9  15\n#> 2 6 2 10  18\n#> 3 7 3 11  21\n#> 4 8 4 12  24\nmutate(df, sum = sum(c(x,y,z)))\n#>   x y  z sum\n#> 1 5 1  9  78\n#> 2 6 2 10  78\n#> 3 7 3 11  78\n#> 4 8 4 12  78\nsuma1 <- function(a,b,c){\n  return(a+b+c)\n}\n\nsuma2 <- function(vec){\n  return(sum(vec))\n}\n\nchoose_one1 <- function(a,b,c){\n  return(sample(c(a,b,c),1))\n}\n\nchoose_one2 <- function(a,b,c){\n  n <- sample(1:3,1)\n  if (n==1){\n    return(a)\n  } else if (n==2){\n    return(b)\n  } else {\n    return(c)\n  }\n}\nmutate(df,sum1 = suma1(x,y,z), sum2 = suma2(c(x,y,z)), choose_one1 = choose_one1(x,y,z), choose_one2 = choose_one2(x,y,z))\n#>   x y  z sum1 sum2 choose_one1 choose_one2\n#> 1 5 1  9   15   78           7           1\n#> 2 6 2 10   18   78           7           2\n#> 3 7 3 11   21   78           7           3\n#> 4 8 4 12   24   78           7           4"},{"path":"row-wise-operations.html","id":"rowwise","chapter":"6 Row Wise Operations","heading":"6.1 rowwise()","text":"perform row operations properly, “group” data across row, using function rowwise(). illustrate ’s use previous data frame using pipe operator. start data frame, group data frame rows, finally add four columns using previous functions.Notice case, operations worked well. last two columns different selected randomly. Nevertheless, selects one element row.","code":"\ndf %>%\n  rowwise() %>%\n  mutate(sum1 = suma1(x,y,z),sum2=suma2(c(x,y,z)),choose_one1 = choose_one1(x,y,z), choose_one2 = choose_one2(x,y,z))\n#> # A tibble: 4 x 7\n#> # Rowwise: \n#>       x     y     z  sum1  sum2 choose_one1 choose_one2\n#>   <dbl> <dbl> <dbl> <dbl> <dbl>       <dbl>       <dbl>\n#> 1     5     1     9    15    15           1           5\n#> 2     6     2    10    18    18           2          10\n#> 3     7     3    11    21    21           3          11\n#> 4     8     4    12    24    24           8           4"},{"path":"row-wise-operations.html","id":"ungroup","chapter":"6 Row Wise Operations","heading":"6.2 ungroup()","text":"rowwise() operator change data, groups . look carefully output, see table says “# Rowwise” let us know data grouped rows. remove grouping, add ungroup() operator.Now output table doesn’t include “# Rowwise”.","code":"\ndf %>%\n  rowwise() %>%\n  mutate(sum1 = suma1(x,y,z),sum2=suma2(c(x,y,z)),choose_one1 = choose_one1(x,y,z), choose_one2 = choose_one2(x,y,z)) %>%\n  ungroup()\n#> # A tibble: 4 x 7\n#>       x     y     z  sum1  sum2 choose_one1 choose_one2\n#>   <dbl> <dbl> <dbl> <dbl> <dbl>       <dbl>       <dbl>\n#> 1     5     1     9    15    15           5           9\n#> 2     6     2    10    18    18           6          10\n#> 3     7     3    11    21    21           3           3\n#> 4     8     4    12    24    24          12          12"},{"path":"project-2.html","id":"project-2","chapter":"7 Project 2","heading":"7 Project 2","text":"Use R simulate following problems. Use conditional probability simulation examples guide. 5.1 5.3Problem 1A cab involved hit run accident night. Two cab companies, Green Blue, operate city. given following data:85% cabs city Green 15% Blue.witness identified cab Blue.court tested reliability witness circumstances existed night accident concluded witness correctly identified one two colors 80% time failed 20% time.probability cab involved accident Blue rather Green?next problems variants boy-girl paradox. simulate large number families two children using data frame two columns. first column older kid (twins) second one younger one. row represents children family. child equal chance either boy girl.Problem 2Consider family two children. Given older one boy, probability children boys?problem ambiguity.Problem 3Consider family two children. Given one children boy, probability children boys?problem can ambiguous. know least one children boy?know gender children families, get one answer. select families least one boy check many two boys. problem.hand, may know every family. Consider following case:Problem 4Mr. Smith father two. meet walking along street young boy proudly introduces son. probability Mr. Smith’s child also boy?case, know Mr. Smith least one boy situation different.problem, assume Mr. Smith equally likely select one two children walk . Therefore, define new column named walking selects one two children family random. use rowwise() operator described . select rows “boy” walking column check many rows two boys.variant Problem 2 makes paradox clear : Mr. Smith father two. meet walking along street young boy proudly introduces older child. probability Mr. Smith’s child also boy?","code":""}]
